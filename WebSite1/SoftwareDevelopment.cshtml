@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "Software Development Page";
}

@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@Page.Title.</h1>
            </hgroup>
        </div>
    </section>
}

<section class="contact">
    <header>
        <h3>Information:</h3>
    </header>
    <p>
        Software development is the computer programming, documenting, testing, and bug fixing involved in creating and maintaining 
        applications and frameworks involved in a software release life cycle and resulting in a software product. The term refers to a 
        process of writing and maintaining the source code, but in a broader sense of the term it includes all that is involved between the 
        conception of the desired software through to the final manifestation of the software, ideally in a planned and structured process.
        Therefore, software development may include research, new development, prototyping, modification, reuse, re-engineering, maintenance, or 
        any other activities that result in software products.
    </p>
</section>

<section class="contact">
    <header>
        <h3>Methodologies:</h3>
    </header>
    <p>
        A software development methodology (also known as a software development process, model, or life cycle) is a framework that is used to 
        structure, plan, and control the process of developing information systems. A wide variety of such frameworks have evolved over the years, 
        each with its own recognized strengths and weaknesses. There are several different approaches to software development: some take a more 
        structured, engineering-based approach to developing business solutions, whereas others may take a more incremental approach, where software 
        evolves as it is developed piece-by-piece. One system development methodology is not necessarily suitable for use by all projects. Each of the 
        available methodologies is best suited to specific kinds of projects, based on various technical, organizational, project and team considerations.
        <br /><br />
        Most methodologies share some combination of the following stages of software development:
        <br /><br />
        Analyzing the problem<br />
        Market research<br />
        Gathering requirements for the proposed business solution<br />
        Devising a plan or design for the software-based solution<br />
        Implementation (coding) of the software<br />
        Testing the software<br />
        Deployment<br />
        Maintenance and bug fixing
    </p>
</section>

<section class="contact">
    <header>
        <h3>Programming paradigm:</h3>
    </header>
    <p>
        A programming paradigm is a fundamental style of computer programming, which is not generally dictated by the 
        project management methodology (such as waterfall or agile). Paradigms differ in the concepts and abstractions used 
        to represent the elements of a program (such as objects, functions, variables, constraints) and the steps that comprise a 
        computation (such as assignations, evaluation, continuations, data flows). Sometimes the concepts asserted by the paradigm 
        are utilized cooperatively in high-level system architecture design; in other cases, the programming paradigm's scope is limited 
        to the internal structure of a particular program or module.
        <br /><br />
        A programming language can support multiple paradigms. For example programs written in C++ or Object Pascal can be purely procedural,
         or purely object-oriented, or contain elements of both paradigms. Software designers and programmers decide how to use those paradigm 
        elements. In object-oriented programming, programmers can think of a program as a collection of interacting objects, while in functional 
        programming a program can be thought of as a sequence of stateless function evaluations. When programming computers or systems with many 
        processors, process-oriented programming allows programmers to think about applications as sets of concurrent processes acting upon logically 
        shared data structures.
    </p>
</section>